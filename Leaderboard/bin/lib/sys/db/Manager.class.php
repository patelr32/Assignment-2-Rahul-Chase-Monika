<?php

// Generated by Haxe 3.3.0
class sys_db_Manager {
	public function __construct($classval) {
		if(!php_Boot::$skip_constructor) {
		$m = haxe_rtti_Meta::getType($classval)->rtti;
		if($m === null) {
			throw new HException("Missing @rtti for class " . _hx_string_or_null(Type::getClassName($classval)));
		}
		$tmp = $m[0];
		$this->table_infos = haxe_Unserializer::run($tmp);
		$this->table_name = $this->quoteField($this->table_infos->name);
		$this->table_keys = $this->table_infos->key;
		$this->class_proto = $classval;
	}}
	public $table_infos;
	public $table_name;
	public $table_keys;
	public $class_proto;
	public function doUpdateCache($x, $name, $v) {
		$cache = Reflect::field($x, "cache_" . _hx_string_or_null($name));
		if($cache === null) {
			return $v;
		}
		$v1 = $this->doSerialize($name, $cache->v);
		return $v1;
	}
	public function doInsert($x) {
		$this->unmake($x);
		$s = new StringBuf();
		$fields = new HList();
		$values = new HList();
		$cache = Reflect::field($x, "__cache__");
		if($cache === null) {
			$cache = _hx_anonymous(array());
			$value = $cache;
			$x->{"__cache__"} = $value;
		}
		{
			$_g = 0;
			$_g1 = $this->table_infos->fields;
			while($_g < $_g1->length) {
				$f = $_g1[$_g];
				++$_g;
				$name = $f->name;
				$fieldName = sys_db_Manager::getFieldName($f);
				$v = Reflect::field($x, $fieldName);
				if($v !== null) {
					$tmp = $this->quoteField($name);
					$fields->add($tmp);
					{
						$_g2 = $f->t;
						$tmp1 = $_g2->index === 30;
						if($tmp1) {
							$v = $this->doUpdateCache($x, $name, $v);
						}
						unset($tmp1,$_g2);
					}
					$values->add($v);
					unset($tmp);
				} else {
					$tmp2 = !$f->isNull;
					if($tmp2) {
						$_g21 = $f->t;
						$tmp3 = $_g21->index;
						switch($tmp3) {
						case 8:{
							$x->{$fieldName} = false;
						}break;
						case 10:case 11:case 12:{}break;
						case 9:case 13:case 14:case 15:case 21:{
							$x->{$fieldName} = "";
						}break;
						case 16:case 17:case 18:case 19:case 22:{
							$value1 = haxe_io_Bytes::alloc(0);
							$x->{$fieldName} = $value1;
						}break;
						case 1:case 3:case 5:case 6:case 7:case 23:case 24:case 25:case 26:case 27:case 28:case 29:case 31:{
							$x->{$fieldName} = 0;
						}break;
						case 0:case 2:case 4:case 20:case 30:case 32:case 33:{}break;
						}
						unset($tmp3,$_g21);
					}
					unset($tmp2);
				}
				$cache->{$name} = $v;
				unset($v,$name,$fieldName,$f);
			}
		}
		$s->add("INSERT INTO ");
		$s->add($this->table_name);
		$tmp4 = null;
		$tmp5 = $fields->length <= 0;
		if($tmp5) {
			$tmp6 = sys_db_Manager::$cnx->dbName();
			$tmp4 = $tmp6 !== "SQLite";
		} else {
			$tmp4 = true;
		}
		if($tmp4) {
			$s->add(" (");
			$tmp7 = $fields->join(",");
			$s->add($tmp7);
			$s->add(") VALUES (");
			$first = true;
			{
				$tmp8 = $values->iterator();
				while(true) {
					$tmp9 = !$tmp8->hasNext();
					if($tmp9) {
						break;
					}
					$v1 = $tmp8->next();
					if($first) {
						$first = false;
					} else {
						$s->add(", ");
					}
					$this->getCnx()->addValue($s, $v1);
					unset($v1,$tmp9);
				}
			}
			$s->add(")");
		} else {
			$s->add(" DEFAULT VALUES");
		}
		$this->unsafeExecute($s->b);
		$x->_lock = true;
		$tmp10 = null;
		$tmp11 = $this->table_keys->length === 1;
		if($tmp11) {
			$tmp12 = $this->table_keys[0];
			$tmp13 = Reflect::field($x, $tmp12);
			$tmp10 = $tmp13 === null;
		} else {
			$tmp10 = false;
		}
		if($tmp10) {
			$value2 = $this->getCnx()->lastInsertId();
			$x->{$this->table_keys[0]} = $value2;
		}
		$this->addToCache($x);
	}
	public function doUpdate($x) {
		if(!$x->_lock) {
			throw new HException("Cannot update a not locked object");
		}
		$upd = $this->getUpdateStatement($x);
		if($upd === null) {
			return;
		}
		$this->unsafeExecute($upd);
	}
	public function getUpdateStatement($x) {
		$this->unmake($x);
		$s = new StringBuf();
		$s->add("UPDATE ");
		$s->add($this->table_name);
		$s->add(" SET ");
		$cache = Reflect::field($x, "__cache__");
		$mod = false;
		{
			$_g = 0;
			$_g1 = $this->table_infos->fields;
			while($_g < $_g1->length) {
				$f = $_g1[$_g];
				++$_g;
				$tmp = $this->table_keys->indexOf($f->name, null);
				if($tmp >= 0) {
					continue;
				}
				$name = $f->name;
				$v = Reflect::field($x, sys_db_Manager::getFieldName($f));
				$vc = Reflect::field($cache, $name);
				$tmp1 = null;
				if($cache !== null) {
					$tmp1 = !_hx_equal($v, $vc);
				} else {
					$tmp1 = true;
				}
				if($tmp1) {
					{
						$tmp2 = $f->t->index;
						switch($tmp2) {
						case 16:case 17:case 18:case 19:case 22:{
							$a = $v;
							$b = $vc;
							$tmp3 = null;
							if($a !== $b) {
								$tmp4 = null;
								if($a !== null) {
									$tmp4 = $b === null;
								} else {
									$tmp4 = true;
								}
								if(!$tmp4) {
									$tmp5 = $a->compare($b);
									$tmp3 = $tmp5 !== 0;
								} else {
									$tmp3 = true;
								}
							} else {
								$tmp3 = false;
							}
							if(!$tmp3) {
								continue 2;
							}
						}break;
						case 30:{
							$v = $this->doUpdateCache($x, $name, $v);
							$a1 = $v;
							$b1 = $vc;
							$tmp6 = null;
							if($a1 !== $b1) {
								$tmp7 = null;
								if($a1 !== null) {
									$tmp7 = $b1 === null;
								} else {
									$tmp7 = true;
								}
								if(!$tmp7) {
									$tmp8 = $a1->compare($b1);
									$tmp6 = $tmp8 !== 0;
								} else {
									$tmp6 = true;
								}
							} else {
								$tmp6 = false;
							}
							if(!$tmp6) {
								continue 2;
							}
						}break;
						default:{}break;
						}
						unset($tmp2);
					}
					if($mod) {
						$s->add(", ");
					} else {
						$mod = true;
					}
					$tmp9 = $this->quoteField($name);
					$s->add($tmp9);
					$s->add(" = ");
					$this->getCnx()->addValue($s, $v);
					if($cache !== null) {
						$cache->{$name} = $v;
					}
					unset($tmp9);
				}
				unset($vc,$v,$tmp1,$tmp,$name,$f);
			}
		}
		if(!$mod) {
			return null;
		}
		$s->add(" WHERE ");
		$this->addKeys($s, $x);
		return $s->b;
	}
	public function doDelete($x) {
		$s = new StringBuf();
		$s->add("DELETE FROM ");
		$s->add($this->table_name);
		$s->add(" WHERE ");
		$this->addKeys($s, $x);
		$this->unsafeExecute($s->b);
		$this->removeFromCache($x);
	}
	public function doLock($i) {
		if($i->_lock) {
			return;
		}
		$s = new StringBuf();
		$s->add("SELECT * FROM ");
		$s->add($this->table_name);
		$s->add(" WHERE ");
		$this->addKeys($s, $i);
		$tmp = $this->unsafeObject($s->b, true);
		if((is_object($_t = $tmp) && ($_t instanceof Enum) ? $_t != $i : !_hx_equal($_t, $i))) {
			throw new HException("Could not lock object (was deleted ?); try restarting transaction");
		}
	}
	public function objectToString($it) {
		$s = new StringBuf();
		$s->add($this->table_name);
		$tmp = $this->table_keys->length === 1;
		if($tmp) {
			$s->add("#");
			$tmp1 = $this->table_keys[0];
			$tmp2 = Reflect::field($it, $tmp1);
			$s->add($tmp2);
		} else {
			$s->add("(");
			$first = true;
			{
				$_g = 0;
				$_g1 = $this->table_keys;
				while($_g < $_g1->length) {
					$f = $_g1[$_g];
					++$_g;
					if($first) {
						$first = false;
					} else {
						$s->add(",");
					}
					$tmp3 = $this->quoteField($f);
					$s->add($tmp3);
					$s->add(":");
					$tmp4 = Reflect::field($it, $f);
					$s->add($tmp4);
					unset($tmp4,$tmp3,$f);
				}
			}
			$s->add(")");
		}
		return $s->b;
	}
	public function doSerialize($field, $v) {
		$s = new haxe_Serializer();
		$s->useEnumIndex = true;
		$s->serialize($v);
		$str = $s->toString();
		return haxe_io_Bytes::ofString($str);
	}
	public function normalizeCache($x) {
		$_g = 0;
		$_g1 = Reflect::fields($x);
		while($_g < $_g1->length) {
			$f = $_g1[$_g];
			++$_g;
			$val = Reflect::field($x, $f);
			$info = $this->table_infos->hfields->get($f);
			if($info !== null) {
				if($val !== null) {
					$tmp = $info->t->index;
					switch($tmp) {
					case 7:{
						$tmp1 = Std::is($val, _hx_qtype("String"));
						if($tmp1) {
							$val = Std::parseFloat($val);
						}
					}break;
					case 8:{
						$tmp2 = !Std::is($val, _hx_qtype("Bool"));
						if($tmp2) {
							$tmp3 = Std::is($val, _hx_qtype("Int"));
							if($tmp3) {
								$val = !_hx_equal($val, 0);
							} else {
								$tmp4 = Std::is($val, _hx_qtype("String"));
								if($tmp4) {
									$_g2 = _hx_string_call($val, "toLowerCase", array());
									switch($_g2) {
									case "1":case "true":{
										$val = true;
									}break;
									case "0":case "false":{
										$val = false;
									}break;
									}
								}
							}
						}
					}break;
					case 10:case 11:{
						$tmp5 = !Std::is($val, _hx_qtype("Date"));
						if($tmp5) {
							$tmp6 = Std::is($val, _hx_qtype("Float"));
							if($tmp6) {
								$val = Date::fromTime($val);
							} else {
								$tmp7 = Std::string($val);
								$v = _hx_string_or_null($tmp7) . "";
								$index = _hx_index_of($v, ".", null);
								if($index >= 0) {
									$v = _hx_substr($v, 0, $index);
								}
								$val = Date::fromString($v);
							}
						}
					}break;
					case 9:case 13:case 14:case 15:{
						$tmp8 = !Std::is($val, _hx_qtype("String"));
						if($tmp8) {
							$tmp9 = Std::string($val);
							$val = _hx_string_or_null($tmp9) . "";
						}
					}break;
					case 16:case 17:case 18:case 19:case 30:{
						$tmp10 = Std::is($val, _hx_qtype("String"));
						if($tmp10) {
							$val = haxe_io_Bytes::ofString($val);
						}
					}break;
					default:{}break;
					}
					unset($tmp);
				}
				$x->{$f} = $val;
			}
			unset($val,$info,$f);
		}
	}
	public function cacheObject($x, $lock) {
		$o = Type::createEmptyInstance($this->class_proto);
		$o->_manager = $this;
		$this->normalizeCache($x);
		{
			$_g = 0;
			$_g1 = Reflect::fields($x);
			while($_g < $_g1->length) {
				$f = $_g1[$_g];
				++$_g;
				$val = Reflect::field($x, $f);
				$info = $this->table_infos->hfields->get($f);
				if($info !== null) {
					$fieldName = sys_db_Manager::getFieldName($info);
					$o->{$fieldName} = $val;
					unset($fieldName);
				}
				unset($val,$info,$f);
			}
		}
		$o->{"__cache__"} = $x;
		$this->addToCache($o);
		$o->_lock = $lock;
		return $o;
	}
	public function make($x) {}
	public function unmake($x) {}
	public function quoteField($f) {
		$tmp = strtolower($f);
		$tmp1 = sys_db_Manager::$KEYWORDS->exists($tmp);
		if($tmp1) {
			return "`" . _hx_string_or_null($f) . "`";
		} else {
			return $f;
		}
	}
	public function addKeys($s, $x) {
		$first = true;
		{
			$_g = 0;
			$_g1 = $this->table_keys;
			while($_g < $_g1->length) {
				$k = $_g1[$_g];
				++$_g;
				if($first) {
					$first = false;
				} else {
					$s->add(" AND ");
				}
				$tmp = $this->quoteField($k);
				$s->add($tmp);
				$s->add(" = ");
				$f = Reflect::field($x, $k);
				if($f === null) {
					throw new HException("Missing key " . _hx_string_or_null($k));
				}
				$this->getCnx()->addValue($s, $f);
				unset($tmp,$k,$f);
			}
		}
	}
	public function unsafeExecute($sql) {
		return $this->getCnx()->request($sql);
	}
	public function unsafeObject($sql, $lock) {
		if($lock !== false) {
			$lock = true;
			$tmp = $this->getLockMode();
			$sql .= _hx_string_or_null($tmp);
		}
		$r = $this->unsafeExecute($sql);
		$r1 = null;
		$tmp1 = $r->hasNext();
		if($tmp1) {
			$r1 = $r->next();
		} else {
			$r1 = null;
		}
		if($r1 === null) {
			return null;
		}
		$this->normalizeCache($r1);
		$c = $this->getFromCache($r1, $lock);
		if($c !== null) {
			return $c;
		}
		$r1 = $this->cacheObject($r1, $lock);
		$this->make($r1);
		return $r1;
	}
	public function dbInfos() {
		return $this->table_infos;
	}
	public function getCnx() {
		return sys_db_Manager::$cnx;
	}
	public function getLockMode() {
		return sys_db_Manager::$lockMode;
	}
	public function initRelation($r) {
		$spod = Type::resolveClass($r->type);
		if($spod === null) {
			throw new HException("Missing spod type " . _hx_string_or_null($r->type));
		}
		$manager = $spod->manager;
		$tmp = null;
		if($manager !== null) {
			$tmp = $manager->table_keys === null;
		} else {
			$tmp = true;
		}
		if($tmp) {
			throw new HException("Invalid manager for relation " . _hx_string_or_null($this->table_name) . ":" . _hx_string_or_null($r->prop));
		}
		if($manager->table_keys->length !== 1) {
			throw new HException("Relation " . _hx_string_or_null($r->prop) . "(" . _hx_string_or_null($r->key) . ") on a multiple key table");
		}
	}
	public function makeCacheKey($x) {
		$tmp = $this->table_keys->length === 1;
		if($tmp) {
			$tmp1 = $this->table_keys[0];
			$k = Reflect::field($x, $tmp1);
			if($k === null) {
				throw new HException("Missing key " . _hx_string_or_null($this->table_keys[0]));
			}
			$tmp2 = Std::string($k);
			return _hx_string_or_null($tmp2) . _hx_string_or_null($this->table_name);
		}
		$s = new StringBuf();
		{
			$_g = 0;
			$_g1 = $this->table_keys;
			while($_g < $_g1->length) {
				$k1 = $_g1[$_g];
				++$_g;
				$v = Reflect::field($x, $k1);
				if($k1 === null) {
					throw new HException("Missing key " . _hx_string_or_null($k1));
				}
				$s->add($v);
				$s->add("#");
				unset($v,$k1);
			}
		}
		$s->add($this->table_name);
		return $s->b;
	}
	public function addToCache($x) {
		$tmp = $this->makeCacheKey($x);
		sys_db_Manager::$object_cache->set($tmp, $x);
	}
	public function removeFromCache($x) {
		$tmp = $this->makeCacheKey($x);
		sys_db_Manager::$object_cache->remove($tmp);
	}
	public function getFromCache($x, $lock) {
		$tmp = $this->makeCacheKey($x);
		$c = sys_db_Manager::$object_cache->get($tmp);
		$tmp1 = null;
		$tmp2 = null;
		if($c !== null) {
			$tmp2 = $lock;
		} else {
			$tmp2 = false;
		}
		if($tmp2) {
			$tmp1 = !$c->_lock;
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			{
				$_g = 0;
				$_g1 = Reflect::fields($c);
				while($_g < $_g1->length) {
					$f = $_g1[$_g];
					++$_g;
					Reflect::deleteField($c, $f);
					unset($f);
				}
			}
			{
				$_g2 = 0;
				$_g11 = $this->table_infos->fields;
				while($_g2 < $_g11->length) {
					$f1 = $_g11[$_g2];
					++$_g2;
					$name = $f1->name;
					$fieldName = sys_db_Manager::getFieldName($f1);
					{
						$value = Reflect::field($x, $name);
						$c->{$fieldName} = $value;
						unset($value);
					}
					unset($name,$fieldName,$f1);
				}
			}
			$c->_lock = true;
			$c->_manager = $this;
			$c->{"__cache__"} = $x;
			$this->make($c);
		}
		return $c;
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	static $cnx;
	static $lockMode;
	static $object_cache;
	static $init_list;
	static $KEYWORDS;
	static function set_cnx($c) {
		sys_db_Manager::$cnx = $c;
		$tmp = null;
		$tmp1 = null;
		if($c !== null) {
			$tmp2 = $c->dbName();
			$tmp1 = $tmp2 === "MySQL";
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = " FOR UPDATE";
		} else {
			$tmp = "";
		}
		sys_db_Manager::$lockMode = $tmp;
		return $c;
	}
	static function getFieldName($field) {
		switch($field->t->index) {
		case 30:case 31:{
			return "data_" . _hx_string_or_null($field->name);
		}break;
		default:{
			return $field->name;
		}break;
		}
	}
	static function initialize() {
		$l = sys_db_Manager::$init_list;
		sys_db_Manager::$init_list = new HList();
		{
			$tmp = $l->iterator();
			while(true) {
				$tmp1 = !$tmp->hasNext();
				if($tmp1) {
					break;
				}
				$m = $tmp->next();
				$_g = 0;
				$_g1 = $m->table_infos->relations;
				while($_g < $_g1->length) {
					$r = $_g1[$_g];
					++$_g;
					$m->initRelation($r);
					unset($r);
				}
				unset($tmp1,$m,$_g1,$_g);
			}
		}
	}
	static function cleanup() {
		sys_db_Manager::$object_cache = new haxe_ds_StringMap();
	}
	static function __depends() {
		return haxe_io_Bytes::alloc(0)->toString();
	}
	static $__properties__ = array("set_cnx" => "set_cnx");
	function __toString() { return 'sys.db.Manager'; }
}
sys_db_Manager::$object_cache = new haxe_ds_StringMap();
sys_db_Manager::$init_list = new HList();
sys_db_Manager::$KEYWORDS = sys_db_Manager_0();
function sys_db_Manager_0() {
	{
		$h = new haxe_ds_StringMap();
		{
			$_g = 0;
			$_g1 = _hx_explode("|", "ADD|ALL|ALTER|ANALYZE|AND|AS|ASC|ASENSITIVE|BEFORE|BETWEEN|BIGINT|BINARY|BLOB|BOTH|BY|CALL|CASCADE|CASE|CHANGE|CHAR|CHARACTER|CHECK|COLLATE|COLUMN|CONDITION|CONSTRAINT|CONTINUE|CONVERT|CREATE|CROSS|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|DATABASE|DATABASES|DAY_HOUR|DAY_MICROSECOND|DAY_MINUTE|DAY_SECOND|DEC|DECIMAL|DECLARE|DEFAULT|DELAYED|DELETE|DESC|DESCRIBE|DETERMINISTIC|DISTINCT|DISTINCTROW|DIV|DOUBLE|DROP|DUAL|EACH|ELSE|ELSEIF|ENCLOSED|ESCAPED|EXISTS|EXIT|EXPLAIN|FALSE|FETCH|FLOAT|FLOAT4|FLOAT8|FOR|FORCE|FOREIGN|FROM|FULLTEXT|GRANT|GROUP|HAVING|HIGH_PRIORITY|HOUR_MICROSECOND|HOUR_MINUTE|HOUR_SECOND|IF|IGNORE|IN|INDEX|INFILE|INNER|INOUT|INSENSITIVE|INSERT|INT|INT1|INT2|INT3|INT4|INT8|INTEGER|INTERVAL|INTO|IS|ITERATE|JOIN|KEY|KEYS|KILL|LEADING|LEAVE|LEFT|LIKE|LIMIT|LINES|LOAD|LOCALTIME|LOCALTIMESTAMP|LOCK|LONG|LONGBLOB|LONGTEXT|LOOP|LOW_PRIORITY|MATCH|MEDIUMBLOB|MEDIUMINT|MEDIUMTEXT|MIDDLEINT|MINUTE_MICROSECOND|MINUTE_SECOND|MOD|MODIFIES|NATURAL|NOT|NO_WRITE_TO_BINLOG|NULL|NUMERIC|ON|OPTIMIZE|OPTION|OPTIONALLY|OR|ORDER|OUT|OUTER|OUTFILE|PRECISION|PRIMARY|PROCEDURE|PURGE|READ|READS|REAL|REFERENCES|REGEXP|RELEASE|RENAME|REPEAT|REPLACE|REQUIRE|RESTRICT|RETURN|REVOKE|RIGHT|RLIKE|SCHEMA|SCHEMAS|SECOND_MICROSECOND|SELECT|SENSITIVE|SEPARATOR|SET|SHOW|SMALLINT|SONAME|SPATIAL|SPECIFIC|SQL|SQLEXCEPTION|SQLSTATE|SQLWARNING|SQL_BIG_RESULT|SQL_CALC_FOUND_ROWS|SQL_SMALL_RESULT|SSL|STARTING|STRAIGHT_JOIN|TABLE|TERMINATED|THEN|TINYBLOB|TINYINT|TINYTEXT|TO|TRAILING|TRIGGER|TRUE|UNDO|UNION|UNIQUE|UNLOCK|UNSIGNED|UPDATE|USAGE|USE|USING|UTC_DATE|UTC_TIME|UTC_TIMESTAMP|VALUES|VARBINARY|VARCHAR|VARCHARACTER|VARYING|WHEN|WHERE|WHILE|WITH|WRITE|XOR|YEAR_MONTH|ZEROFILL|ASENSITIVE|CALL|CONDITION|CONNECTION|CONTINUE|CURSOR|DECLARE|DETERMINISTIC|EACH|ELSEIF|EXIT|FETCH|GOTO|INOUT|INSENSITIVE|ITERATE|LABEL|LEAVE|LOOP|MODIFIES|OUT|READS|RELEASE|REPEAT|RETURN|SCHEMA|SCHEMAS|SENSITIVE|SPECIFIC|SQL|SQLEXCEPTION|SQLSTATE|SQLWARNING|TRIGGER|UNDO|UPGRADE|WHILE");
			while($_g < $_g1->length) {
				$k = $_g1[$_g];
				++$_g;
				$tmp = strtolower($k);
				$h->set($tmp, true);
				unset($tmp,$k);
			}
		}
		return $h;
	}
}
